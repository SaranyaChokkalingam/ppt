<build>
    <plugins>
        <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-shade-plugin</artifactId>
            <version>3.4.1</version>
            <executions>
                <execution>
                    <phase>package</phase>
                    <goals>
                        <goal>shade</goal>
                    </goals>
                    <configuration>
                        <createDependencyReducedPom>false</createDependencyReducedPom>
                    </configuration>
                </execution>
            </executions>
        </plugin>
    </plugins>
</build>




import csv
import chromadb
from chromadb.config import Settings
import os

def main():
    csv_file = "embeddings_clean.csv"

    # Use persistent Chroma DB
    client = chromadb.Client(Settings(persist_directory="./chroma_store"))
    collection = client.get_or_create_collection("my_java_embeddings")

    with open(csv_file, 'r', encoding='utf-8') as f:
        reader = csv.reader(f)
        header = next(reader)

        for i, row in enumerate(reader):
            text = row[0]
            embedding = [float(val) for val in row[1:]]

            collection.add(
                documents=[text],
                embeddings=[embedding],
                ids=[f"id_{i}"]
            )

    print(f"‚úÖ Loaded {i+1} records into persistent Chroma collection 'my_java_embeddings'.")
    os._exit(0)   # üí• guaranteed immediate exit (avoids chromadb hanging)

if __name__ == "__main__":
    try:
        main()
    except Exception as e:
        print(f"‚ùå Error occurred: {e}")
        os._exit(1)







----

import chromadb
from chromadb.config import Settings
import os

def main():
    # Use persistent Chroma DB
    client = chromadb.Client(Settings(persist_directory="./chroma_store"))
    collection = client.get_or_create_collection("my_java_embeddings")

    query_text = input("üîé Enter your search query: ")

    results = collection.query(
        query_texts=[query_text],
        n_results=3,
        include=["documents", "distances"]
    )

    print("\n‚úÖ Top matching documents:")
    for doc, distance in zip(results["documents"][0], results["distances"][0]):
        print(f"- {doc} (distance: {distance})")

    os._exit(0)   # üí• guaranteed immediate exit after query

if __name__ == "__main__":
    try:
        main()
    except Exception as e:
        print(f"‚ùå Error occurred: {e}")
        os._exit(1)
