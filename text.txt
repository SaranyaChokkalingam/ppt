package com.mycompany.langchain4jexample;

import dev.langchain4j.model.embedding.onnx.allminilml6v2.AllMiniLmL6V2EmbeddingModel;
import dev.langchain4j.model.output.Response;
import dev.langchain4j.data.embedding.Embedding;

import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;

public class SaferEmbeddingToCSV {

    public static void main(String[] args) {
        AllMiniLmL6V2EmbeddingModel model = new AllMiniLmL6V2EmbeddingModel();

        String[] texts = {
                "AI is transforming business.",
                "LangChain4j helps Java work with AI models.",
                "ChromaDB stores vector embeddings locally."
        };

        String outputPath = "embeddings_clean.csv";

        try (BufferedWriter writer = new BufferedWriter(new FileWriter(outputPath))) {
            // Write header: text + embedding columns
            writer.write("text");
            for (int i = 0; i < 384; i++) {   // usually MiniLM = 384 dims
                writer.write(",val" + i);
            }
            writer.newLine();

            // Write each row
            for (String text : texts) {
                Response<Embedding> response = model.embed(text);
                float[] embedding = response.content().vector();

                // Write text
                writer.write("\"" + text.replace("\"", "\"\"") + "\"");

                // Write each embedding value
                for (float value : embedding) {
                    writer.write("," + value);
                }
                writer.newLine();
            }

            System.out.println("âœ… Clean CSV saved to: " + outputPath);

        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
